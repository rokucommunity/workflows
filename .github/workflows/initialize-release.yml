name: Initialize Release

on:
  workflow_call:
    inputs:
      branch:
        type: string
        description: "The branch to create the release from"
        required: true
      releaseType:
        type: string
        description: "The type of release: major, minor, or patch"
        required: true
      customVersion:
        type: string
        description: "The custom version to use"
        required: true
      installDependencies:
        type: string
        description: "Update dependencies"
        required: true
      workflows-ref:
        type: string
        description: "The ref to run the workflow"
        required: false
        default: "master"

jobs:
  initialize-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the rokucommunity/workflows repo
        uses: actions/checkout@master
        with:
          repository: rokucommunity/workflows
          path: nested-ci
          ref: ${{ inputs.workflows-ref }}

      - name: Setup node
        uses: actions/setup-node@master
        with:
          node-version: '18.18.2'

      - name: CD into nested-ci, run npm ci
        run: |
          cd nested-ci
          npm ci

      - name: get RokuCommunity bot token #so the bot's name shows up on all our actions
        uses: tibdex/github-app-token@v1
        id: generate-token
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_PRIVATE_KEY }}`

      - name: Set RUNNER_DEBUG env variable
        run: |
          if [[ "$RUNNER_DEBUG" == "1" ]]; then
            echo "RUNNER_DEBUG=true" >> $GITHUB_ENV
          else
            echo "RUNNER_DEBUG=false" >> $GITHUB_ENV
          fi

      - name: Run initialize
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          DEBUG_LOGGING: ${{ env.RUNNER_DEBUG }}
        run: |
          npx ts-node nested-ci/src/cli.ts \
            initialize-release \
            --projectName "${{ github.repository }}" \
            --releaseType "${{ inputs.releaseType }}" \
            --branch "${{ inputs.branch }}" \
            --customVersion "${{ inputs.customVersion }}" \
            --installDependencies "${{ inputs.installDependencies == 'true' }}"
